class CafeManagementSystem:
    def _init_(self):
        self.menu = {
            1: {'item': 'Coffee', 'price': 80.0},
            2: {'item': 'Tea', 'price': 60.0},
            3: {'item': 'Sandwich', 'price': 150.0},
            4: {'item': 'Cake', 'price': 120.0}
        }
        self.order_history = []
        self.GST = 5 / 100  # GST of 5%

    def display_menu(self):
        print("\n----- Café Menu -----")
        print("{:<5} {:<15} {:>10}".format("ID", "Item", "Price (₹)"))
        print("-" * 32)
        for id, details in self.menu.items():
            print("{:<5} {:<15} {:>10.2f}".format(id, details['item'], details['price']))
        print("\n")

    def add_item(self):
        item_name = input("Enter the name of the new item: ")
        try:
            price = float(input("Enter the price of the item (₹): "))
            new_id = max(self.menu.keys()) + 1
            self.menu[new_id] = {'item': item_name, 'price': price}
            print(f"{item_name} added to the menu with price ₹{price:.2f}!")
        except ValueError:
            print("Invalid price! Please enter a valid number.")

    def update_item(self):
        self.display_menu()
        try:
            item_id = int(input("Enter the ID of the item to update: "))
            if item_id in self.menu:
                new_name = input(f"Enter the new name for {self.menu[item_id]['item']} (or press Enter to skip): ")
                new_price = input(f"Enter the new price for {self.menu[item_id]['item']} (or press Enter to skip): ")

                if new_name:
                    self.menu[item_id]['item'] = new_name
                if new_price:
                    self.menu[item_id]['price'] = float(new_price)

                print(f"Item {item_id} updated successfully!")
            else:
                print("Invalid item ID!")
        except ValueError:
            print("Invalid input! Please enter a valid ID or price.")

    def remove_item(self):
        self.display_menu()
        try:
            item_id = int(input("Enter the ID of the item to remove: "))
            if item_id in self.menu:
                removed_item = self.menu.pop(item_id)
                print(f"{removed_item['item']} removed from the menu!")
            else:
                print("Invalid item ID!")
        except ValueError:
            print("Invalid ID! Please enter a valid number.")

    def calculate_total(self, order):
        total = sum(item[1] * item[2] for item in order)  # Total before tax and discount
        gst_amount = total * self.GST
        return total, gst_amount

    def place_order(self):
        order = []
        self.display_menu()
        while True:
            try:
                item_id = int(input("Enter the ID of the item to order (or 0 to finish): "))
                if item_id == 0:
                    break
                if item_id in self.menu:
                    quantity = int(input(f"Enter quantity of {self.menu[item_id]['item']}: "))
                    order.append((self.menu[item_id]['item'], self.menu[item_id]['price'], quantity))
                else:
                    print("Invalid item ID!")
            except ValueError:
                print("Invalid input! Please enter a valid ID or quantity.")
        
        if order:
            total, gst_amount = self.calculate_total(order)
            grand_total = total + gst_amount
            print("\n--- Order Summary ---")
            for item in order:
                print(f"{item[2]}x {item[0]} - ₹{item[1] * item[2]:.2f}")
            print(f"\nTotal (before GST): ₹{total:.2f}")
            print(f"GST @ 5%: ₹{gst_amount:.2f}")
            print(f"Grand Total: ₹{grand_total:.2f}")
            
            # Adding order to history
            self.order_history.append(order)
        else:
            print("No items ordered!")

    def view_order_history(self):
        if not self.order_history:
            print("No orders placed yet.")
        else:
            for idx, order in enumerate(self.order_history, start=1):
                print(f"\n--- Order {idx} ---")
                for item in order:
                    print(f"{item[2]}x {item[0]} - ₹{item[1] * item[2]:.2f}")
    
    def run(self):
        while True:
            print("\n--- Café Management System ---")
            print("1. View Menu")
            print("2. Place Order")
            print("3. Add Item to Menu")
            print("4. Update Menu Item")
            print("5. Remove Item from Menu")
            print("6. View Order History")
            print("7. Exit")
            
            choice = input("Choose an option: ")
            
            if choice == '1':
                self.display_menu()
            elif choice == '2':
                self.place_order()
            elif choice == '3':
                self.add_item()
            elif choice == '4':
                self.update_item()
            elif choice == '5':
                self.remove_item()
            elif choice == '6':
                self.view_order_history()
            elif choice == '7':
                print("Exiting system. Goodbye!")
                break
            else:
                print("Invalid choice! Please select a valid option.")

if _name_ == "_main_":
    cafe = CafeManagementSystem()
    cafe.run()
